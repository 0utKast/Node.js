{
  "name": "keygrip",
  "version": "0.1.7",
  "description": "Key signing and verification for rotated credentials",
  "scripts": {
    "install": "node scripts/install.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/keygrip.git"
  },
  "main": "./index",
  "engines": [
    "node"
  ],
  "directories": {
    "lib": "./lib"
  },
  "files": [
    ""
  ],
  "readme": "Keygrip\n=======\n\nKeygrip is a [node.js](http://nodejs.org/) module for signing and verifying data (such as cookies or URLs) through a rotating credential system, in which new server keys can be added and old ones removed regularly, without invalidating client credentials.\n\n## Requirements\n\n* [node.js](http://nodejs.org/), tested with 0.4.1\n\n## Install\n\n    $ npm install keygrip\n    \n## API\n\n### keys = new Keygrip([ keylist ])\n\nThis creates a new Keygrip based on the provided keylist, an array of secret keys used for SHA1 HMAC digests. If no list is given, or the list is empty, Keygrip uses the default key created during `npm` installation, and will issue a warning to the console.\n\nNote that the `new` operator is also optional, so all of the following will work when `Keygrip = require( \"keygrip\" )`:\n\n    keys = new Keygrip\n    keys = new Keygrip([ \"SEKRIT2\", \"SEKRIT1\" ])\n    keys = Keygrip()\n    keys = Keygrip([ \"SEKRIT2\", \"SEKRIT1\" ])\n    keys = require( \"keygrip\" )()\n    \nThe keylist is an array of all valid keys for signing, in descending order of freshness; new keys should be `unshift`ed into the array and old keys should be `pop`ped.\n\nThe tradeoff here is that adding more keys to the keylist allows for more granular freshness for key validation, at the cost of a more expensive worst-case scenario for old or invalid hashes.\n\nKeygrip keeps a reference to this array to automatically reflect any changes. This reference is stored using a closure to prevent external access.\n\n### keys.sign( data )\n\nThis creates a SHA1 HMAC based on the _first_ key in the keylist, and outputs it as a 27-byte url-safe base64 digest (base64 without padding, replacing `+` with `-` and `/` with `_`).\n\n### keys.index( data, digest )\n\nThis loops through all of the keys currently in the keylist until the digest of the current key matches the given digest, at which point the current index is returned. If no key is matched, `-1` is returned.\n\nThe idea is that if the index returned is greater than `0`, the data should be re-signed to prevent premature credential invalidation, and enable better performance for subsequent challenges.\n\n### keys.verify( data, digest )\n\nThis uses `index` to return `true` if the digest matches any existing keys, and `false` otherwise.\n\n## Example\n\n    // ./test.js\n    var assert = require( \"assert\" )\n      , Keygrip = require( \"keygrip\" )\n      , keylist, keys, hash, index\n    \n    // keygrip takes an array of keys, but if none exist,\n    // it uses the defaults created during npm installation.\n    // (but it'll will warn you)\n    console.log( \"Ignore this message:\" )\n    keys = new Keygrip( /* empty list */ )\n    \n    // .sign returns the hash for the first key\n    // all hashes are SHA1 HMACs in url-safe base64\n    hash = keys.sign( \"bieberschnitzel\" )\n    assert.ok( /^[\\w\\-]{27}$/.test( hash ) )\n    \n    // but we're going to use our list.\n    // (note that the 'new' operator is optional)\n    keylist = [ \"SEKRIT3\", \"SEKRIT2\", \"SEKRIT1\" ]\n    keys = Keygrip( keylist )\n    hash = keys.sign( \"bieberschnitzel\" )\n    \n    // .index returns the index of the first matching key\n    index = keys.index( \"bieberschnitzel\", hash )\n    assert.equal( index, 0 )\n    \n    // .verify returns the a boolean indicating a matched key\n    matched = keys.verify( \"bieberschnitzel\", hash )\n    assert.ok( matched )\n    \n    index = keys.index( \"bieberschnitzel\", \"o_O\" )\n    assert.equal( index, -1 )\n    \n    // rotate a new key in, and an old key out\n    keylist.unshift( \"SEKRIT4\" )\n    keylist.pop()\n    \n    // if index > 0, it's time to re-sign\n    index = keys.index( \"bieberschnitzel\", hash )\n    assert.equal( index, 1 )\n    hash = keys.sign( \"bieberschnitzel\" ) \n\n## TODO\n\n* Write a library for URL signing\n\nCopyright\n---------\n\nCopyright (c) 2011 Jed Schmidt. See LICENSE.txt for details.\n\nSend any questions or comments [here](http://twitter.com/jedschmidt).",
  "_id": "keygrip@0.1.7",
  "_from": "keygrip@0.1.x"
}
