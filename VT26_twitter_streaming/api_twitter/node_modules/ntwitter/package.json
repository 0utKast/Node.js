{
  "name": "ntwitter",
  "version": "0.2.10",
  "description": "Asynchronous Twitter REST/stream/search client API for node.js.",
  "keywords": [
    "twitter",
    "streaming",
    "oauth"
  ],
  "homepage": "https://github.com/AvianFlu/ntwitter",
  "author": {
    "name": "jdub, changes by AvianFlu"
  },
  "licenses": {
    "type": "MIT",
    "url": "http://github.com/AvianFlu/ntwitter/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/AvianFlu/ntwitter.git"
  },
  "dependencies": {
    "oauth": ">=0.8.4",
    "cookies": "0.1.x",
    "keygrip": "0.1.x"
  },
  "engines": {
    "node": ">=0.4.0 < 0.7.0"
  },
  "main": "./lib/twitter",
  "readme": "Asynchronous Twitter client API for node.js\n===========================================\n\n[ntwitter](http://github.com/AvianFlu/ntwitter) is an upgraded version of jdub's [node-twitter](http://github.com/jdub/node-twitter), which in turn was inspired by, and uses some code from, technoweenie's [twitter-node](http://github.com/technoweenie/twitter-node).\n\n## Installation\n\nYou can install ntwitter and its dependencies with npm: `npm install ntwitter`.\n\n\n## Getting started\n\nThis library is, for the most part, the same API as `node-twitter`. Much of the documentation below is straight from `node-twitter` - credit goes to [jdub](http://github.com/jdub) for putting all this together in the first place. \n\nThe most significant API change involves error handling in callbacks.  Callbacks should now look something like this:\n\n         function (err, result) {\n           if (err) {return callback(err)}\n           // Do something with 'result' here\n         }\n\nWhere `callback` is the parent function's callback.  (Or any other function you want to call on error.)\n\n### Setup API \n\nThe keys listed below can be obtained from [dev.twitter.com](http://dev.twitter.com) after setting up a new App.\n\n        var twitter = require('ntwitter');\n\n        var twit = new twitter({\n          consumer_key: 'Twitter',\n          consumer_secret: 'API',\n          access_token_key: 'keys',\n          access_token_secret: 'go here'\n        });\n\n\n### REST API \n\n\nInteraction with other parts of Twitter is accomplished through their RESTful API.\nThe best documentation for this exists at [dev.twitter.com](http://dev.twitter.com).  Convenience methods exist\nfor many of the available methods, but some may be more up-to-date than others.\nIf your Twitter interaction is very important, double-check the parameters in the code with \nTwitter's current documentation.\n\nNote that all functions may be chained:\n\n        twit\n          .verifyCredentials(function (err, data) {\n            console.log(data);\n          })\n          .updateStatus('Test tweet from ntwitter/' + twitter.VERSION,\n            function (err, data) {\n              console.log(data);\n            }\n          );\n\n### Search API \n\n        twit.search('nodejs OR #node', function(err, data) {\n          console.log(data);\n        });\n\n### Streaming API \n\nThe stream() callback receives a Stream-like EventEmitter:\n\nHere is an example of how to call the 'statuses/sample' method:\n\n        twit.stream('statuses/sample', function(stream) {\n          stream.on('data', function (data) {\n            console.log(data);\n          });\n        });\n        \nHere is an example of how to call the 'statuses/filter' method with a bounding box over San Fransisco and New York City ( see streaming api for more details on [locations](https://dev.twitter.com/docs/streaming-api/methods#locations) ):\n\n        twit.stream('statuses/filter', {'locations':'-122.75,36.8,-121.75,37.8,-74,40,-73,41'}, function(stream) {\n          stream.on('data', function (data) {\n            console.log(data);\n          });\n        });\n\nntwitter also supports user and site streams:\n\n        twit.stream('user', {track:'nodejs'}, function(stream) {\n          stream.on('data', function (data) {\n            console.log(data);\n          });\n          stream.on('end', function (response) {\n            // Handle a disconnection\n          });\n          stream.on('destroy', function (response) {\n            // Handle a 'silent' disconnection from Twitter, no end/error event fired\n          });\n          // Disconnect stream after five seconds\n          setTimeout(stream.destroy, 5000);\n        });\n\n## Contributors\n\n- [AvianFlu](http://github.com/AvianFlu) - Upgrades and current support\n- [Jeff Waugh](http://github.com/jdub) (primary author)\n- [rick](http://github.com/technoweenie) (parser.js and, of course, twitter-node!)\n- [Cole Gillespie](http://github.com/coleGillespie) (additional documentation)\n- [Tim Cameron Ryan](http://github.com/timcameronryan)\n- [Jonathan Griggs](https://github.com/boatmeme)\n- [pwagener](https://github.com/pwagener)\n- [fatshotty](https://github.com/fatshotty)\n- [Ian Babrou](https://github.com/bobrik)\n\nIf you contribute and would like to see your name here, please add it with your changes!\n\n## TODO\n\n- Complete the convenience functions, preferably generated\n- Support [recommended reconnection behaviour](http://dev.twitter.com/pages/user_streams_suggestions) for the streaming APIs\n\n",
  "_id": "ntwitter@0.2.10",
  "dist": {
    "shasum": "d6822ff3fb759340ebd2fe6f27bae9d9d0df9b70"
  },
  "_from": "ntwitter@0.2.10"
}
